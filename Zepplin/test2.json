{"paragraphs":[{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","lineNumbers":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1484379955584_510896677","id":"20170114-074555_1705475369","dateCreated":"2017-01-14T07:45:55+0000","status":"ERROR","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:226","text":"import org.apache.commons.io.IOUtils;\r\n import java.net.URL;\r\n import java.nio.charset.Charset;\r\n \r\n  \r\n  // load map data\r\n   val myMapText = sc.parallelize(IOUtils.toString(new URL(\"https://gist.githubusercontent.com/Madhuka/74cb9a6577c87aa7d2fd/raw/2f758d33d28ddc01c162293ad45dc16be2806a6b/data.csv\"),\r\n         Charset.forName(\"utf8\")).split(\"\\n\"));\r\n         \r\n       //  case class Map(Country:String, Name:String, lat : Float, lan : Float, Altitude : Float);\r\n  \r\n  val myMap = myMapText.map(s=>s.split(\",\")).filter(s=>s(0)!=\"Country\").map(\r\n      s=>Map(s(0), \r\n              s(1),\r\n             s(2).toFloat,\r\n             s(3).toFloat,\r\n             s(4).toFloat\r\n         );\r\n         \r\n         var msg = dataValidatorSrv.validateMapData(data);\r\n ","user":"anonymous","dateUpdated":"2017-01-14T07:55:21+0000","dateFinished":"2017-01-14T07:55:23+0000","dateStarted":"2017-01-14T07:55:21+0000","result":{"code":"ERROR","type":"TEXT","msg":"\nimport org.apache.commons.io.IOUtils\n\nimport java.net.URL\n\nimport java.nio.charset.Charset\n\nmyMapText: org.apache.spark.rdd.RDD[String] = ParallelCollectionRDD[138] at parallelize at <console>:105\n\n\n\n<console>:7: error: ')' expected but ';' found.\n         );\n          ^\n"}},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/text","lineNumbers":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1484379962846_-1836471687","id":"20170114-074602_583668002","dateCreated":"2017-01-14T07:46:02+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:401","text":"import org.apache.spark.SparkConf;\r\nimport org.apache.spark.SparkContext;\r\nimport org.apache.spark.sql.SQLContext;\r\n\r\nSystem.setProperty(\"hadoop.home.dir\",\"/usr/hadoop-2.7.3/bin\");\r\n// initialise spark context\r\n//val conf = new SparkConf().setAppName(\"PbSpark\").setMaster(\"local[2]\").set(\"spark.executor.memory\", \"4g\").set(\"spark.driver.allowMultipleContexts\",\"true\");\r\n//val sc = new SparkContext(conf);\r\n\r\nval gson = new com.google.gson.Gson()\r\n//val sqlContext = new SQLContext(sc);\r\nval EntertainmentTable = sqlContext.jsonFile(\"/usr/tweets/tweets3.json\");\r\nEntertainmentTable.registerTempTable(\"EntertainmentTable\");\r\n//EntertainmentTable.select($\"text\", $\"lang\" + 1).show()\r\n//EntertainmentTable.printSchema();\r\ncase class Map(lang:String, location:String)\r\nval maxTweets1 =sqlContext.sql(\"SELECT text FROM EntertainmentTable where text LIKE '%AirMax Tavas%' AND text is not null LIMIT 1\")\r\nval maxTweets =sqlContext.sql(\"SELECT text FROM EntertainmentTable where text LIKE '%AirMax Tavas%' AND text is not null\")\r\n.map{s=>Map(s(0).toString, \r\n             s(1).toString\r\n             \r\n         )\r\n};//.collect.map(s=>scala.collection.JavaConversions.mapAsJavaMap(s))\r\n//;\r\n//(\"SELECT lang, count(*) as c FROM EntertainmentTable where lang is not null  group by lang order by c desc limit 10\");\r\n//sqlContext.sql(\"SELECT TRIM( REGEXP_REPLACE( SUBSTR(source,instr(source,”>”)+1),”/a>”,”” ) ) AS Device, COUNT(TRIM(source)) AS PerCount FROM zumamustfall_db.zmf_tweets GROUP BY TRIM( REGEXP_REPLACE( SUBSTR(source,instr(source,”>”)+1),”/a>”,”” ) ) HAVING COUNT(TRIM(source)) >= 2 ORDER BY PerCount DESC LIMIT 10 \"); \r\n  //sqlContext.sql(\"SELECT lang, count(*) as c FROM EntertainmentTable where lang is not null  group by lang order by c desc limit 10\");\r\n//maxTweets.show();\r\n\r\n//val bubblesJson = gson.toJson(maxTweets)\r\n//EntertainmentTable.show();\r\n//maxTweets.rdd.saveAsTextFile(\"/usr/tweets/tweetsTest\");\r\nprintln(s\"\"\"%html\r\n<script src=\"http://d3js.org/d3.v3.min.js\"></script>\r\n<script src=\"http://d3js.org/topojson.v1.min.js\"></script>\r\n<script src=\"http://datamaps.github.io/scripts/0.4.0/datamaps.all.js\"></script>\r\n<div id=\"container\" style=\"position: relative; width: 500px; height: 300px;\"></div>\r\n<div class=\"hoverinfo\">Magnitude: ' + maxTweets1   '</div>\r\n<script>\r\n    var map = new Datamap({element: document.getElementById('container')});\r\n</script>\r\n <script>\r\n  /*  var map = new Datamap({\r\n        element: document.getElementById('container'),\r\n        fills: {\r\n            defaultFill: 'rgba(23,48,210,0.9)' // Any hex, color name or rgb/rgba value\r\n        }\r\n    });*/\r\n    \r\n    \r\n    \r\n    setTimeout(function(){\r\nvar map = new Datamap({\r\nelement: document.getElementById('worldMap'),\r\ngeographyConfig: {\r\npopupOnHover: false,\r\nhighlightOnHover: false\r\n},\r\nfills: {\r\ndefaultFill: '#ABDDA4',\r\n'0': '#393b79',\r\n'1': '#5254a3',\r\n'2': '#6b6ecf',\r\n'3': '#9c9ede',\r\n'4': '#637939',\r\n'5': '#8ca252',\r\n'6': '#b5cf6b',\r\n'7': '#cedb9c',\r\n'8': '#8c6d31',\r\n'9': '#bd9e39',\r\n'10': '#e7ba52',\r\n'20': '#e7cb94',\r\n'30': '#843c39',\r\n'40': '#ad494a',\r\n'50': '#d6616b',\r\n'60': '#e7969c',\r\n'70': '#7b4173',\r\n'80': '#a55194',\r\n'90': '#ce6dbd',\r\n'100': '#de9ed6'\r\n},\r\nbubblesConfig: {\r\nborderWidth: 0,\r\nfillOpacity: 0.75\r\n}\r\n});\r\n\r\nmap.bubbles(maxTweets1, {\r\npopupTemplate: function(geo, data) {\r\nreturn '<div class=\"hoverinfo\">Magnitude: ' + maxTweets1   '</div>'\r\n}\r\n});\r\n\r\n}, 2000)\r\n</script>\r\n\r\n\r\n\r\n\"\"\")","user":"anonymous","dateUpdated":"2017-01-14T09:36:25+0000","dateFinished":"2017-01-14T09:36:26+0000","dateStarted":"2017-01-14T09:36:25+0000","result":{"code":"SUCCESS","type":"HTML","msg":"<script src=\"http://d3js.org/d3.v3.min.js\"></script>\n<script src=\"http://d3js.org/topojson.v1.min.js\"></script>\n<script src=\"http://datamaps.github.io/scripts/0.4.0/datamaps.all.js\"></script>\n<div id=\"container\" style=\"position: relative; width: 500px; height: 300px;\"></div>\n<div class=\"hoverinfo\">Magnitude: ' + maxTweets1   '</div>\n<script>\n    var map = new Datamap({element: document.getElementById('container')});\n</script>\n <script>\n  /*  var map = new Datamap({\n        element: document.getElementById('container'),\n        fills: {\n            defaultFill: 'rgba(23,48,210,0.9)' // Any hex, color name or rgb/rgba value\n        }\n    });*/\n    \n    \n    \n    setTimeout(function(){\nvar map = new Datamap({\nelement: document.getElementById('worldMap'),\ngeographyConfig: {\npopupOnHover: false,\nhighlightOnHover: false\n},\nfills: {\ndefaultFill: '#ABDDA4',\n'0': '#393b79',\n'1': '#5254a3',\n'2': '#6b6ecf',\n'3': '#9c9ede',\n'4': '#637939',\n'5': '#8ca252',\n'6': '#b5cf6b',\n'7': '#cedb9c',\n'8': '#8c6d31',\n'9': '#bd9e39',\n'10': '#e7ba52',\n'20': '#e7cb94',\n'30': '#843c39',\n'40': '#ad494a',\n'50': '#d6616b',\n'60': '#e7969c',\n'70': '#7b4173',\n'80': '#a55194',\n'90': '#ce6dbd',\n'100': '#de9ed6'\n},\nbubblesConfig: {\nborderWidth: 0,\nfillOpacity: 0.75\n}\n});\n\nmap.bubbles(maxTweets1, {\npopupTemplate: function(geo, data) {\nreturn '<div class=\"hoverinfo\">Magnitude: ' + maxTweets1   '</div>'\n}\n});\n\n}, 2000)\n</script>\n\n\n\n\n"}},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1484380074671_-1621211517","id":"20170114-074754_1612573763","dateCreated":"2017-01-14T07:47:54+0000","status":"READY","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:537","text":"","dateUpdated":"2017-01-14T07:48:54+0000"}],"name":"test2","id":"2C6M836D9","angularObjects":{"2C7FS1BHF:shared_process":[],"2C72KFAZM:shared_process":[],"2C7EYSJ2R:shared_process":[],"2C82SJ9YM:shared_process":[],"2C5VFSPHF:shared_process":[],"2C71XNAN5:shared_process":[],"2C7WJ1Q7C:shared_process":[],"2C6UHRZQK:shared_process":[],"2C7S13ZER:shared_process":[]},"config":{"looknfeel":"default"},"info":{}}